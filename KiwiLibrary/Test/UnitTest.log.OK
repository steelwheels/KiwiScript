'use strict' ;
/* Define Enum: AccessType */
let AccessType = {
	read : 0,
	write : 1,
	append : 2
};
/* Define Enum: Alignment */
let Alignment = {
	leading : 0,
	trailing : 1,
	fill : 2,
	center : 3
};
/* Define Enum: Authorize */
let Authorize = {
	undetermined : 0,
	denied : 2,
	authorized : 3
};
/* Define Enum: Axis */
let Axis = {
	horizontal : 0,
	vertical : 1
};
/* Define Enum: Color */
let Color = {
	black : 0,
	red : 1,
	green : 2,
	yellow : 3,
	blue : 4,
	magenta : 5,
	cyan : 6,
	white : 7,
	min : 0,
	max : 7
};
/* Define Enum: Distribution */
let Distribution = {
	fillProportinally : 0,
	fillEqually : 1,
	equalSpacing : 2
};
/* Define Enum: ExitCode */
let ExitCode = {
	noError : 0,
	internalError : 1,
	commaneLineError : 2,
	syntaxError : 3,
	exception : 4
};
/* Define Enum: FileType */
let FileType = {
	notExist : 0,
	file : 1,
	directory : 2
};
/* Define Enum: TextAlign */
let TextAlign = {
	left : 0,
	center : 2,
	right : 1,
	justfied : 3,
	normal : 4
};
/* Define Enum: TypeID */
let TypeID = {
	Undefined : 0,
	Null : 1,
	Boolean : 2,
	Number : 3,
	String : 4,
	Date : 5,
	URL : 6,
	Image : 7,
	Array : 8,
	Dictionary : 9,
	Range : 10,
	Rect : 13,
	Point : 11,
	Size : 12,
	Object : 14
};
class CancelException extends Error
{
        constructor (code){
                super("CancelException") ;
                this.code = code ;
        }
}

function _cancel() {
	throw new CancelException(ExitCode.exception) ;
}

/**
 * Debug.js
 */

function checkVariables(place, ...vars)
{
	let result = true ;
	vars.forEach(function(value, index){
		if(isUndefined(value)){
			console.log("check at " + place + ": Undefined at index " + index) ;
			result = false ;
		} else if(isNull(value)) {
			console.log("check at " + place + ": Null at index " + index) ;
			result = false ;
		}
	}) ;
	return result ;
}
/* Math.js */

/* randomInt: Get random integer value between min and max */
Math.randomInt = function(min, max) {
  const range = max - min + 1 ;
  const rval  = Math.floor(Math.random() * range) ;
  return rval + min ;
} ;
/* Graphics.js */

class Graphics {
	// func distanceBetween2Points(p0:Point, p1:Point) -> Double
	static distanceBetween2Points(p0, p1) {
		const dx = p1.x - p0.x ;
		const dy = p1.y - p0.y ;
		return sqrt(dx*dx + dy*dy) ;
	}


	// func InsetRect(rect: Rect, dx:Double, dy:Double) -> Rect
	static insetRect(rect, dx, dy) {
		if(checkVariables("insetRect", rect, dx, dy)){
			const newx      = rect.x + dx ;
			const newy      = rect.y + dy ;
			const newwidth  = Math.max(rect.width  - 2.0 * dx, 0.0) ;
			const newheight = Math.max(rect.height - 2.0 * dy, 0.0) ;
			return Rect(newx, newy, newwidth, newheight) ;
		} else {
			return Rect(0.0, 0.0, 0.0, 0.0) ;
		}
	}

	// func centerOfRect(rect: Rect) -> Point
	static centerOfRect(rect){
		const x = rect.x + (rect.width  / 2.0) ;
		const y = rect.y + (rect.height / 2.0) ;
		return Point(x, y) ;
	}

	// func pointInFrame(point: Point, frame: Rect) -> Point
	static pointInFrame(point, frame){
		let x = point.x ;
		if(x < frame.x){
			x = frame.x ;
		} else if(frame.x + frame.width < x){
			x = frame.x + frame.width ;
		}
		let y = point.y ;
		if(y < frame.y){
			y = frame.y ;
		} else if(frame.y + frame.height < y){
			y = frame.y + frame.height ;
		}
		return Point(x, y) ;
	}
}
  -> Compiler: OK
/* Unit test for Type operation */
* Test: JSValue(bool):
type = bool
native: 1
native -> js: 1
duplicate: 1
* Test: JSValue(Int32):
type = number
native: 1
native -> js: 1
duplicate: 1
* Test: JSValue(Double):
type = number
native: 1.23
native -> js: 1.23
duplicate: 1.23
* Test: JSValue(String):
type = string
native: "Hello, world"
native -> js: "Hello, world"
duplicate: "Hello, world"
* Test: JSValue(Date):
type = date
native: 1970-01-01 00:00:00 +0000
native -> js: 1970-01-01 00:00:00 +0000
duplicate: 1970-01-01 00:00:00 +0000
* Test: JSValue(URL):
type = URL
native: https://github.com/steelwheels
native -> js: https://github.com/steelwheels
duplicate: https://github.com/steelwheels
* Test: JSValue(Image):
type = image
native: {image: name:<unknown>, size:0.0 x 0.0}
native -> js: {image: name:<unknown>, size:0.0 x 0.0}
duplicate: {image: name:<unknown>, size:0.0 x 0.0}
* Test: JSValue(Array):
type = array
native: [
  1
  1
  1.23
  "Hello, world"
  1970-01-01 00:00:00 +0000
  https://github.com/steelwheels
  {image: name:<unknown>, size:0.0 x 0.0}
]
native -> js: [
  1
  1
  1.23
  "Hello, world"
  1970-01-01 00:00:00 +0000
  https://github.com/steelwheels
  {image: name:<unknown>, size:0.0 x 0.0}
]
duplicate: [
  1
  1
  1.23
  "Hello, world"
  1970-01-01 00:00:00 +0000
  https://github.com/steelwheels
  {image: name:<unknown>, size:0.0 x 0.0}
]
* Test: JSValue(Dictionary):
type = dictionary
native: {
  bool: 1
  date: 1970-01-01 00:00:00 +0000
  double: 1.23
  image: {image: name:<unknown>, size:0.0 x 0.0}
  int32: 1
  string: "Hello, world"
  url: https://github.com/steelwheels
}
native -> js: {
  bool: 1
  date: 1970-01-01 00:00:00 +0000
  double: 1.23
  image: {image: name:<unknown>, size:0.0 x 0.0}
  int32: 1
  string: "Hello, world"
  url: https://github.com/steelwheels
}
duplicate: {
  bool: 1
  date: 1970-01-01 00:00:00 +0000
  double: 1.23
  image: {image: name:<unknown>, size:0.0 x 0.0}
  int32: 1
  string: "Hello, world"
  url: https://github.com/steelwheels
}
* Test: JSValue(Range):
type = range
native: {10, 3}
native -> js: {10, 3}
duplicate: {10, 3}
* Test: JSValue(Point):
type = point
native: {x:1.0, y:2.0}
native -> js: {x:1.0, y:2.0}
duplicate: {x:1.0, y:2.0}
* Test: JSValue(Size):
type = size
native: {width:3.0, height:4.0}
native -> js: {width:3.0, height:4.0}
duplicate: {width:3.0, height:4.0}
* Test: JSValue(Rect):
type = rect
native: {x:1.0, y:2.0, width:3.0, height:4.0}
native -> js: {x:1.0, y:2.0, width:3.0, height:4.0}
duplicate: {x:1.0, y:2.0, width:3.0, height:4.0}
/* Unit test for Math operation */
sqrt(4.0) = 2.0
asin(1.0/1.41421) = 0.25PI
acos(1.41421/2.0) = 0.25PI
/* Unit test for Database */
read(d0) -> 1234
write(d2, -5) -> 1
read(d2) -> -5
/* Unit test for Operation */
// Allocate operation
'use strict' ;
/* Define Enum: AccessType */
let AccessType = {
	read : 0,
	write : 1,
	append : 2
};
/* Define Enum: Alignment */
let Alignment = {
	leading : 0,
	trailing : 1,
	fill : 2,
	center : 3
};
/* Define Enum: Authorize */
let Authorize = {
	undetermined : 0,
	denied : 2,
	authorized : 3
};
/* Define Enum: Axis */
let Axis = {
	horizontal : 0,
	vertical : 1
};
/* Define Enum: Color */
let Color = {
	black : 0,
	red : 1,
	green : 2,
	yellow : 3,
	blue : 4,
	magenta : 5,
	cyan : 6,
	white : 7,
	min : 0,
	max : 7
};
/* Define Enum: Distribution */
let Distribution = {
	fillProportinally : 0,
	fillEqually : 1,
	equalSpacing : 2
};
/* Define Enum: ExitCode */
let ExitCode = {
	noError : 0,
	internalError : 1,
	commaneLineError : 2,
	syntaxError : 3,
	exception : 4
};
/* Define Enum: FileType */
let FileType = {
	notExist : 0,
	file : 1,
	directory : 2
};
/* Define Enum: TextAlign */
let TextAlign = {
	left : 0,
	center : 2,
	right : 1,
	justfied : 3,
	normal : 4
};
/* Define Enum: TypeID */
let TypeID = {
	Undefined : 0,
	Null : 1,
	Boolean : 2,
	Number : 3,
	String : 4,
	Date : 5,
	URL : 6,
	Image : 7,
	Array : 8,
	Dictionary : 9,
	Range : 10,
	Rect : 13,
	Point : 11,
	Size : 12,
	Object : 14
};
class CancelException extends Error
{
        constructor (code){
                super("CancelException") ;
                this.code = code ;
        }
}

function _cancel() {
	throw new CancelException(ExitCode.exception) ;
}

/**
 * Debug.js
 */

function checkVariables(place, ...vars)
{
	let result = true ;
	vars.forEach(function(value, index){
		if(isUndefined(value)){
			console.log("check at " + place + ": Undefined at index " + index) ;
			result = false ;
		} else if(isNull(value)) {
			console.log("check at " + place + ": Null at index " + index) ;
			result = false ;
		}
	}) ;
	return result ;
}
/* Math.js */

/* randomInt: Get random integer value between min and max */
Math.randomInt = function(min, max) {
  const range = max - min + 1 ;
  const rval  = Math.floor(Math.random() * range) ;
  return rval + min ;
} ;
/* Graphics.js */

class Graphics {
	// func distanceBetween2Points(p0:Point, p1:Point) -> Double
	static distanceBetween2Points(p0, p1) {
		const dx = p1.x - p0.x ;
		const dy = p1.y - p0.y ;
		return sqrt(dx*dx + dy*dy) ;
	}


	// func InsetRect(rect: Rect, dx:Double, dy:Double) -> Rect
	static insetRect(rect, dx, dy) {
		if(checkVariables("insetRect", rect, dx, dy)){
			const newx      = rect.x + dx ;
			const newy      = rect.y + dy ;
			const newwidth  = Math.max(rect.width  - 2.0 * dx, 0.0) ;
			const newheight = Math.max(rect.height - 2.0 * dy, 0.0) ;
			return Rect(newx, newy, newwidth, newheight) ;
		} else {
			return Rect(0.0, 0.0, 0.0, 0.0) ;
		}
	}

	// func centerOfRect(rect: Rect) -> Point
	static centerOfRect(rect){
		const x = rect.x + (rect.width  / 2.0) ;
		const y = rect.y + (rect.height / 2.0) ;
		return Point(x, y) ;
	}

	// func pointInFrame(point: Point, frame: Rect) -> Point
	static pointInFrame(point, frame){
		let x = point.x ;
		if(x < frame.x){
			x = frame.x ;
		} else if(frame.x + frame.width < x){
			x = frame.x + frame.width ;
		}
		let y = point.y ;
		if(y < frame.y){
			y = frame.y ;
		} else if(frame.y + frame.height < y){
			y = frame.y + frame.height ;
		}
		return Point(x, y) ;
	}
}
/*
 * Operation.js : Define Operation class
 */

/* This class must be inherited */
class Operation
{
	constructor(){
		this.parameters = {} ;
	}

	setParameter(name, value){
		this.parameters[name] = value ;
	}

	parameter(name){
		return this.parameters[name] ;
	}

	main(){
		try {
			this.execute() ;
		} catch(err){
			return err.code ;
		}
	}

	execute(){
		console.error("[Error] Operation.execute must be override\n") ;
		return 0 ;
	}

	cancel(){
		_cancel() ;
	}
}

function _set_operation(op, name, value)
{
	op.setParameter(name, value) ;
}

function _get_operation(op, name)
{
	return op.parameter(name) ;
}

function _exec_operation(op)
{
	op.main() ;
}
class UTStruct {
  constructor(object) {
    this._a = object.a ;
    this._b = object.b ;
  }
  get a() { return this._a ; }
  set a(newval) { this._a = newval ; }
  get b() { return this._b ; }
  set b(newval) { this._b = newval ; }
  toParameter(){
    let object = {
    a: this._a,
    b: this._b,
    } ;
    return object ;
  }
}
/* unit-test-0.js */

class Task extends Operation
{
	execute(){
		console.log("Task: Hello, World !!") ;
	}
}

operation = new Task() ;

// Set input
// Get input
Input value: 1.23
// Execute the operation
// Wait operations are finished
Task: Hello, World !!
/* Unit test for Operation2 */
'use strict' ;
/* Define Enum: AccessType */
let AccessType = {
	read : 0,
	write : 1,
	append : 2
};
/* Define Enum: Alignment */
let Alignment = {
	leading : 0,
	trailing : 1,
	fill : 2,
	center : 3
};
/* Define Enum: Authorize */
let Authorize = {
	undetermined : 0,
	denied : 2,
	authorized : 3
};
/* Define Enum: Axis */
let Axis = {
	horizontal : 0,
	vertical : 1
};
/* Define Enum: Color */
let Color = {
	black : 0,
	red : 1,
	green : 2,
	yellow : 3,
	blue : 4,
	magenta : 5,
	cyan : 6,
	white : 7,
	min : 0,
	max : 7
};
/* Define Enum: Distribution */
let Distribution = {
	fillProportinally : 0,
	fillEqually : 1,
	equalSpacing : 2
};
/* Define Enum: ExitCode */
let ExitCode = {
	noError : 0,
	internalError : 1,
	commaneLineError : 2,
	syntaxError : 3,
	exception : 4
};
/* Define Enum: FileType */
let FileType = {
	notExist : 0,
	file : 1,
	directory : 2
};
/* Define Enum: TextAlign */
let TextAlign = {
	left : 0,
	center : 2,
	right : 1,
	justfied : 3,
	normal : 4
};
/* Define Enum: TypeID */
let TypeID = {
	Undefined : 0,
	Null : 1,
	Boolean : 2,
	Number : 3,
	String : 4,
	Date : 5,
	URL : 6,
	Image : 7,
	Array : 8,
	Dictionary : 9,
	Range : 10,
	Rect : 13,
	Point : 11,
	Size : 12,
	Object : 14
};
class CancelException extends Error
{
        constructor (code){
                super("CancelException") ;
                this.code = code ;
        }
}

function _cancel() {
	throw new CancelException(ExitCode.exception) ;
}

/**
 * Debug.js
 */

function checkVariables(place, ...vars)
{
	let result = true ;
	vars.forEach(function(value, index){
		if(isUndefined(value)){
			console.log("check at " + place + ": Undefined at index " + index) ;
			result = false ;
		} else if(isNull(value)) {
			console.log("check at " + place + ": Null at index " + index) ;
			result = false ;
		}
	}) ;
	return result ;
}
/* Math.js */

/* randomInt: Get random integer value between min and max */
Math.randomInt = function(min, max) {
  const range = max - min + 1 ;
  const rval  = Math.floor(Math.random() * range) ;
  return rval + min ;
} ;
/* Graphics.js */

class Graphics {
	// func distanceBetween2Points(p0:Point, p1:Point) -> Double
	static distanceBetween2Points(p0, p1) {
		const dx = p1.x - p0.x ;
		const dy = p1.y - p0.y ;
		return sqrt(dx*dx + dy*dy) ;
	}


	// func InsetRect(rect: Rect, dx:Double, dy:Double) -> Rect
	static insetRect(rect, dx, dy) {
		if(checkVariables("insetRect", rect, dx, dy)){
			const newx      = rect.x + dx ;
			const newy      = rect.y + dy ;
			const newwidth  = Math.max(rect.width  - 2.0 * dx, 0.0) ;
			const newheight = Math.max(rect.height - 2.0 * dy, 0.0) ;
			return Rect(newx, newy, newwidth, newheight) ;
		} else {
			return Rect(0.0, 0.0, 0.0, 0.0) ;
		}
	}

	// func centerOfRect(rect: Rect) -> Point
	static centerOfRect(rect){
		const x = rect.x + (rect.width  / 2.0) ;
		const y = rect.y + (rect.height / 2.0) ;
		return Point(x, y) ;
	}

	// func pointInFrame(point: Point, frame: Rect) -> Point
	static pointInFrame(point, frame){
		let x = point.x ;
		if(x < frame.x){
			x = frame.x ;
		} else if(frame.x + frame.width < x){
			x = frame.x + frame.width ;
		}
		let y = point.y ;
		if(y < frame.y){
			y = frame.y ;
		} else if(frame.y + frame.height < y){
			y = frame.y + frame.height ;
		}
		return Point(x, y) ;
	}
}
MainThread: Compile OK
'use strict' ;
/* Define Enum: AccessType */
let AccessType = {
	read : 0,
	write : 1,
	append : 2
};
/* Define Enum: Alignment */
let Alignment = {
	leading : 0,
	trailing : 1,
	fill : 2,
	center : 3
};
/* Define Enum: Authorize */
let Authorize = {
	undetermined : 0,
	denied : 2,
	authorized : 3
};
/* Define Enum: Axis */
let Axis = {
	horizontal : 0,
	vertical : 1
};
/* Define Enum: Color */
let Color = {
	black : 0,
	red : 1,
	green : 2,
	yellow : 3,
	blue : 4,
	magenta : 5,
	cyan : 6,
	white : 7,
	min : 0,
	max : 7
};
/* Define Enum: Distribution */
let Distribution = {
	fillProportinally : 0,
	fillEqually : 1,
	equalSpacing : 2
};
/* Define Enum: ExitCode */
let ExitCode = {
	noError : 0,
	internalError : 1,
	commaneLineError : 2,
	syntaxError : 3,
	exception : 4
};
/* Define Enum: FileType */
let FileType = {
	notExist : 0,
	file : 1,
	directory : 2
};
/* Define Enum: TextAlign */
let TextAlign = {
	left : 0,
	center : 2,
	right : 1,
	justfied : 3,
	normal : 4
};
/* Define Enum: TypeID */
let TypeID = {
	Undefined : 0,
	Null : 1,
	Boolean : 2,
	Number : 3,
	String : 4,
	Date : 5,
	URL : 6,
	Image : 7,
	Array : 8,
	Dictionary : 9,
	Range : 10,
	Rect : 13,
	Point : 11,
	Size : 12,
	Object : 14
};
class CancelException extends Error
{
        constructor (code){
                super("CancelException") ;
                this.code = code ;
        }
}

function _cancel() {
	throw new CancelException(ExitCode.exception) ;
}

/**
 * Debug.js
 */

function checkVariables(place, ...vars)
{
	let result = true ;
	vars.forEach(function(value, index){
		if(isUndefined(value)){
			console.log("check at " + place + ": Undefined at index " + index) ;
			result = false ;
		} else if(isNull(value)) {
			console.log("check at " + place + ": Null at index " + index) ;
			result = false ;
		}
	}) ;
	return result ;
}
/* Math.js */

/* randomInt: Get random integer value between min and max */
Math.randomInt = function(min, max) {
  const range = max - min + 1 ;
  const rval  = Math.floor(Math.random() * range) ;
  return rval + min ;
} ;
/* Graphics.js */

class Graphics {
	// func distanceBetween2Points(p0:Point, p1:Point) -> Double
	static distanceBetween2Points(p0, p1) {
		const dx = p1.x - p0.x ;
		const dy = p1.y - p0.y ;
		return sqrt(dx*dx + dy*dy) ;
	}


	// func InsetRect(rect: Rect, dx:Double, dy:Double) -> Rect
	static insetRect(rect, dx, dy) {
		if(checkVariables("insetRect", rect, dx, dy)){
			const newx      = rect.x + dx ;
			const newy      = rect.y + dy ;
			const newwidth  = Math.max(rect.width  - 2.0 * dx, 0.0) ;
			const newheight = Math.max(rect.height - 2.0 * dy, 0.0) ;
			return Rect(newx, newy, newwidth, newheight) ;
		} else {
			return Rect(0.0, 0.0, 0.0, 0.0) ;
		}
	}

	// func centerOfRect(rect: Rect) -> Point
	static centerOfRect(rect){
		const x = rect.x + (rect.width  / 2.0) ;
		const y = rect.y + (rect.height / 2.0) ;
		return Point(x, y) ;
	}

	// func pointInFrame(point: Point, frame: Rect) -> Point
	static pointInFrame(point, frame){
		let x = point.x ;
		if(x < frame.x){
			x = frame.x ;
		} else if(frame.x + frame.width < x){
			x = frame.x + frame.width ;
		}
		let y = point.y ;
		if(y < frame.y){
			y = frame.y ;
		} else if(frame.y + frame.height < y){
			y = frame.y + frame.height ;
		}
		return Point(x, y) ;
	}
}
/*
 * Operation.js : Define Operation class
 */

/* This class must be inherited */
class Operation
{
	constructor(){
		this.parameters = {} ;
	}

	setParameter(name, value){
		this.parameters[name] = value ;
	}

	parameter(name){
		return this.parameters[name] ;
	}

	main(){
		try {
			this.execute() ;
		} catch(err){
			return err.code ;
		}
	}

	execute(){
		console.error("[Error] Operation.execute must be override\n") ;
		return 0 ;
	}

	cancel(){
		_cancel() ;
	}
}

function _set_operation(op, name, value)
{
	op.setParameter(name, value) ;
}

function _get_operation(op, name)
{
	return op.parameter(name) ;
}

function _exec_operation(op)
{
	op.main() ;
}
/* unit-test-1.js */

class Machine extends Operation
{
	execute(){
		console.log("[Machine] Hello, world");
	}
} ;

operation = new Machine() ;

MainThread: [Compile] OK
* Test1
MainThread: Set command: param0 <- 1
* Test3
MainThread: Set command: param2 <- {image: name:<unknown>, size:0.0 x 0.0}
* Test5
[Machine] Hello, world
exec result: OK
/* Unit test for native value */
*** Class definition ***
class UTStruct {
  constructor(object) {
    this._a = object.a ;
    this._b = object.b ;
  }
  get a() { return this._a ; }
  set a(newval) { this._a = newval ; }
  get b() { return this._b ; }
  set b(newval) { this._b = newval ; }
  toParameter(){
    let object = {
    a: this._a,
    b: this._b,
    } ;
    return object ;
  }
}
/* Unit test for Thread */
Source URL: file:///Users/tomoo/Project/KiwiScript/KiwiLibrary/Test/Sample/sample-0.jspkg/
{
  URL: ../Test/Sample/sample-0.jspkg/
  libraries: {
  }
  scripts: {
    sample0: {
      "sample0.js"
    }
  }
}
Message from thread: Hello, threading !! Thread,123, undefined
Thread is finished with error code: 0
/* Unit test for Run */
Message from run: Hello, running !! 123, Message from UTRun
Thread is finished with error code: 0
/* Unit test for FileManager */
Home directory:
  * path: <skipped>
    isReadable:   false
    isWritable:   false
    isExecutable: false
    isDeletable:  true
FileType: Not exit
  * path: <skipped>
    isReadable:   true
    isWritable:   true
    isExecutable: true
    isDeletable:  true
FileType: Directory
normalize: /home/user + tmp => /home/user/tmp
normalize: /home/user/tmp + .. => /home/user
Expected value: true
/* Unit test for URL */
- test appendingPathComponent
  URL: /home/user/Document/Script
/* Unit test for FontManager */
[Available fonts]
..SFCompactDisplay-Regular
..SFCompactRounded-Regular
..SFCompactText-Italic
..SFCompactText-Regular
.AlBayanPUA
.AlBayanPUA-Bold
.AlNilePUA
.AlNilePUA-Bold
.AlTarikhPUA
.AppleColorEmojiUI
.AppleSDGothicNeoI-Bold
.AppleSDGothicNeoI-ExtraBold
.AppleSDGothicNeoI-Heavy
.AppleSDGothicNeoI-Light
.AppleSDGothicNeoI-Medium
.AppleSDGothicNeoI-Regular
.AppleSDGothicNeoI-SemiBold
.AppleSDGothicNeoI-Thin
.AppleSDGothicNeoI-UltraLight
.ArabicUIDisplay-Black
.ArabicUIDisplay-Bold
.ArabicUIDisplay-Heavy
.ArabicUIDisplay-Light
.ArabicUIDisplay-Medium
.ArabicUIDisplay-Regular
.ArabicUIDisplay-Semibold
.ArabicUIDisplay-Thin
.ArabicUIDisplay-Ultralight
.ArabicUIText-Bold
.ArabicUIText-Heavy
.ArabicUIText-Light
.ArabicUIText-Medium
.ArabicUIText-Regular
.ArabicUIText-Semibold
.ArialHebrewDeskInterface
.ArialHebrewDeskInterface-Bold
.ArialHebrewDeskInterface-Light
.BaghdadPUA
.BeirutPUA
.DamascusPUA
.DamascusPUABold
.DamascusPUALight
.DamascusPUAMedium
.DamascusPUASemiBold
.DecoTypeNaskhPUA
.DiwanKufiPUA
.FarahPUA
.GeezaProInterface
.GeezaProInterface-Bold
.GeezaProInterface-Light
.GeezaProPUA
.GeezaProPUA-Bold
.HelveticaNeueDeskInterface-Bold
.HelveticaNeueDeskInterface-BoldItalic
.HelveticaNeueDeskInterface-Heavy
.HelveticaNeueDeskInterface-Italic
.HelveticaNeueDeskInterface-Light
.HelveticaNeueDeskInterface-MediumItalicP4
.HelveticaNeueDeskInterface-MediumP4
.HelveticaNeueDeskInterface-Regular
.HelveticaNeueDeskInterface-Thin
.HelveticaNeueDeskInterface-UltraLightP2
.HiraKakuInterface-W0
.HiraKakuInterface-W1
.HiraKakuInterface-W2
.HiraKakuInterface-W3
.HiraKakuInterface-W4
.HiraKakuInterface-W5
.HiraKakuInterface-W6
.HiraKakuInterface-W7
.HiraKakuInterface-W8
.HiraKakuInterface-W9
.HiraginoSansGBInterface-W3
.HiraginoSansGBInterface-W6
.Keyboard
.KufiStandardGKPUA
.LucidaGrandeUI
.LucidaGrandeUI-Bold
.MunaPUA
.MunaPUABlack
.MunaPUABold
.NadeemPUA
.NewYork-Black
.NewYork-BlackItalic
.NewYork-Bold
.NewYork-BoldItalic
.NewYork-Heavy
.NewYork-HeavyItalic
.NewYork-Medium
.NewYork-MediumItalic
.NewYork-Regular
.NewYork-RegularItalic
.NewYork-Semibold
.NewYork-SemiboldItalic
.NotoNastaliqUrduUI
.NotoNastaliqUrduUI-Bold
.PingFangHK-Light
.PingFangHK-Medium
.PingFangHK-Regular
.PingFangHK-Semibold
.PingFangHK-Thin
.PingFangHK-Ultralight
.PingFangSC-Light
.PingFangSC-Medium
.PingFangSC-Regular
.PingFangSC-Semibold
.PingFangSC-Thin
.PingFangSC-Ultralight
.PingFangTC-Light
.PingFangTC-Medium
.PingFangTC-Regular
.PingFangTC-Semibold
.PingFangTC-Thin
.PingFangTC-Ultralight
.SFCompactDisplay-Black
.SFCompactDisplay-Bold
.SFCompactDisplay-Heavy
.SFCompactDisplay-Light
.SFCompactDisplay-Medium
.SFCompactDisplay-Regular
.SFCompactDisplay-Semibold
.SFCompactDisplay-Thin
.SFCompactDisplay-Ultralight
.SFCompactRounded-Black
.SFCompactRounded-Bold
.SFCompactRounded-Heavy
.SFCompactRounded-Light
.SFCompactRounded-Medium
.SFCompactRounded-Regular
.SFCompactRounded-Semibold
.SFCompactRounded-Thin
.SFCompactRounded-Ultralight
.SFCompactText-Bold
.SFCompactText-BoldG1
.SFCompactText-BoldG2
.SFCompactText-BoldG3
.SFCompactText-BoldItalic
.SFCompactText-BoldItalicG1
.SFCompactText-BoldItalicG2
.SFCompactText-BoldItalicG3
.SFCompactText-Heavy
.SFCompactText-HeavyItalic
.SFCompactText-Light
.SFCompactText-LightItalic
.SFCompactText-Medium
.SFCompactText-MediumItalic
.SFCompactText-Regular
.SFCompactText-RegularG1
.SFCompactText-RegularG2
.SFCompactText-RegularG3
.SFCompactText-RegularItalic
.SFCompactText-RegularItalicG1
.SFCompactText-RegularItalicG2
.SFCompactText-RegularItalicG3
.SFCompactText-Semibold
.SFCompactText-SemiboldItalic
.SFCompactText-Thin
.SFCompactText-ThinItalic
.SFCompactText-Ultralight
.SFCompactText-UltralightItalic
.SFNS-Black
.SFNS-BlackItalic
.SFNS-Bold
.SFNS-BoldG1
.SFNS-BoldG2
.SFNS-BoldG3
.SFNS-BoldG4
.SFNS-BoldItalic
.SFNS-Heavy
.SFNS-HeavyG1
.SFNS-HeavyG2
.SFNS-HeavyG3
.SFNS-HeavyG4
.SFNS-HeavyItalic
.SFNS-Light
.SFNS-LightG1
.SFNS-LightG2
.SFNS-LightG3
.SFNS-LightG4
.SFNS-LightItalic
.SFNS-Medium
.SFNS-MediumG1
.SFNS-MediumG2
.SFNS-MediumG3
.SFNS-MediumG4
.SFNS-MediumItalic
.SFNS-Regular
.SFNS-RegularG1
.SFNS-RegularG2
.SFNS-RegularG3
.SFNS-RegularG4
.SFNS-RegularItalic
.SFNS-Semibold
.SFNS-SemiboldG1
.SFNS-SemiboldG2
.SFNS-SemiboldG3
.SFNS-SemiboldG4
.SFNS-SemiboldItalic
.SFNS-Thin
.SFNS-ThinG1
.SFNS-ThinG2
.SFNS-ThinG3
.SFNS-ThinG4
.SFNS-ThinItalic
.SFNS-Ultralight
.SFNS-UltralightG1
.SFNS-UltralightG2
.SFNS-UltralightG3
.SFNS-UltralightG4
.SFNS-UltralightItalic
.SFNS-Ultrathin
.SFNS-UltrathinG1
.SFNS-UltrathinG2
.SFNS-UltrathinG3
.SFNS-UltrathinG4
.SFNS-UltrathinItalic
.SFNSDisplayCondensed-Black
.SFNSDisplayCondensed-Bold
.SFNSDisplayCondensed-Heavy
.SFNSDisplayCondensed-Light
.SFNSDisplayCondensed-Medium
.SFNSDisplayCondensed-Regular
.SFNSDisplayCondensed-Semibold
.SFNSDisplayCondensed-Thin
.SFNSDisplayCondensed-Ultralight
.SFNSMono-Bold
.SFNSMono-BoldItalic
.SFNSMono-Heavy
.SFNSMono-HeavyItalic
.SFNSMono-Light
.SFNSMono-LightItalic
.SFNSMono-Medium
.SFNSMono-MediumItalic
.SFNSMono-Regular
.SFNSMono-RegularItalic
.SFNSMono-Semibold
.SFNSMono-SemiboldItalic
.SFNSRounded-Black
.SFNSRounded-Bold
.SFNSRounded-BoldG1
.SFNSRounded-BoldG2
.SFNSRounded-BoldG3
.SFNSRounded-BoldG4
.SFNSRounded-Heavy
.SFNSRounded-HeavyG1
.SFNSRounded-HeavyG2
.SFNSRounded-HeavyG3
.SFNSRounded-HeavyG4
.SFNSRounded-Light
.SFNSRounded-LightG1
.SFNSRounded-LightG2
.SFNSRounded-LightG3
.SFNSRounded-LightG4
.SFNSRounded-Medium
.SFNSRounded-MediumG1
.SFNSRounded-MediumG2
.SFNSRounded-MediumG3
.SFNSRounded-MediumG4
.SFNSRounded-Regular
.SFNSRounded-RegularG1
.SFNSRounded-RegularG2
.SFNSRounded-RegularG3
.SFNSRounded-RegularG4
.SFNSRounded-Semibold
.SFNSRounded-SemiboldG1
.SFNSRounded-SemiboldG2
.SFNSRounded-SemiboldG3
.SFNSRounded-SemiboldG4
.SFNSRounded-Thin
.SFNSRounded-ThinG1
.SFNSRounded-ThinG2
.SFNSRounded-ThinG3
.SFNSRounded-ThinG4
.SFNSRounded-Ultralight
.SFNSRounded-UltralightG1
.SFNSRounded-UltralightG2
.SFNSRounded-UltralightG3
.SFNSRounded-UltralightG4
.SFNSRounded-Ultrathin
.SFNSRounded-UltrathinG1
.SFNSRounded-UltrathinG2
.SFNSRounded-UltrathinG3
.SFNSRounded-UltrathinG4
.SFNSTextCondensed-Bold
.SFNSTextCondensed-Heavy
.SFNSTextCondensed-Light
.SFNSTextCondensed-Medium
.SFNSTextCondensed-Regular
.SFNSTextCondensed-Semibold
.SanaPUA
.SavoyeLetPlainCC
AcademyEngravedLetPlain
AlBayan
AlBayan-Bold
AlNile
AlNile-Bold
AlTarikh
AmericanTypewriter
AmericanTypewriter-Bold
AmericanTypewriter-Condensed
AmericanTypewriter-CondensedBold
AmericanTypewriter-CondensedLight
AmericanTypewriter-Light
AmericanTypewriter-Semibold
AndaleMono
Apple-Chancery
AppleBraille
AppleBraille-Outline6Dot
AppleBraille-Outline8Dot
AppleBraille-Pinpoint6Dot
AppleBraille-Pinpoint8Dot
AppleCasual
AppleColorEmoji
AppleGothic
AppleMyungjo
AppleSDGothicNeo-Bold
AppleSDGothicNeo-ExtraBold
AppleSDGothicNeo-Heavy
AppleSDGothicNeo-Light
AppleSDGothicNeo-Medium
AppleSDGothicNeo-Regular
AppleSDGothicNeo-SemiBold
AppleSDGothicNeo-Thin
AppleSDGothicNeo-UltraLight
AppleSymbols
AquaKana
AquaKana-Bold
Arial-Black
Arial-BoldItalicMT
Arial-BoldMT
Arial-ItalicMT
ArialHebrew
ArialHebrew-Bold
ArialHebrew-Light
ArialHebrewScholar
ArialHebrewScholar-Bold
ArialHebrewScholar-Light
ArialMT
ArialNarrow
ArialNarrow-Bold
ArialNarrow-BoldItalic
ArialNarrow-Italic
ArialRoundedMTBold
ArialUnicodeMS
Athelas-Bold
Athelas-BoldItalic
Athelas-Italic
Athelas-Regular
Avenir-Black
Avenir-BlackOblique
Avenir-Book
Avenir-BookOblique
Avenir-Heavy
Avenir-HeavyOblique
Avenir-Light
Avenir-LightOblique
Avenir-Medium
Avenir-MediumOblique
Avenir-Oblique
Avenir-Roman
AvenirNext-Bold
AvenirNext-BoldItalic
AvenirNext-DemiBold
AvenirNext-DemiBoldItalic
AvenirNext-Heavy
AvenirNext-HeavyItalic
AvenirNext-Italic
AvenirNext-Medium
AvenirNext-MediumItalic
AvenirNext-Regular
AvenirNext-UltraLight
AvenirNext-UltraLightItalic
AvenirNextCondensed-Bold
AvenirNextCondensed-BoldItalic
AvenirNextCondensed-DemiBold
AvenirNextCondensed-DemiBoldItalic
AvenirNextCondensed-Heavy
AvenirNextCondensed-HeavyItalic
AvenirNextCondensed-Italic
AvenirNextCondensed-Medium
AvenirNextCondensed-MediumItalic
AvenirNextCondensed-Regular
AvenirNextCondensed-UltraLight
AvenirNextCondensed-UltraLightItalic
Ayuthaya
Baghdad
BanglaMN
BanglaMN-Bold
BanglaSangamMN
BanglaSangamMN-Bold
BankGothic-Light
BankGothic-Medium
Baskerville
Baskerville-Bold
Baskerville-BoldItalic
Baskerville-Italic
Baskerville-SemiBold
Baskerville-SemiBoldItalic
Beirut
BigCaslon-Medium
BlackmoorLetPlain
BlairMdITCTT-Medium
BodoniOrnamentsITCTT
BodoniSvtyTwoITCTT-Bold
BodoniSvtyTwoITCTT-Book
BodoniSvtyTwoITCTT-BookIta
BodoniSvtyTwoOSITCTT-Bold
BodoniSvtyTwoOSITCTT-Book
BodoniSvtyTwoOSITCTT-BookIt
BodoniSvtyTwoSCITCTT-Book
BordeauxRomanBoldLetPlain
BradleyHandITCTT-Bold
BrushScriptMT
CapitalsRegular
Chalkboard
Chalkboard-Bold
ChalkboardSE-Bold
ChalkboardSE-Light
ChalkboardSE-Regular
Chalkduster
Charter-Black
Charter-BlackItalic
Charter-Bold
Charter-BoldItalic
Charter-Italic
Charter-Roman
Cochin
Cochin-Bold
Cochin-BoldItalic
Cochin-Italic
ComicSansMS
ComicSansMS-Bold
Copperplate
Copperplate-Bold
Copperplate-Light
CorsivaHebrew
CorsivaHebrew-Bold
Courier
Courier-Bold
Courier-BoldOblique
Courier-Oblique
CourierNewPS-BoldItalicMT
CourierNewPS-BoldMT
CourierNewPS-ItalicMT
CourierNewPSMT
Cracked
DFKaiShu-SB-Estd-BF
DFWaWaSC-W5
DFWaWaTC-W5
DINAlternate-Bold
DINCondensed-Bold
Damascus
DamascusBold
DamascusLight
DamascusMedium
DamascusSemiBold
DecoTypeNaskh
DevanagariMT
DevanagariMT-Bold
DevanagariSangamMN
DevanagariSangamMN-Bold
Didot
Didot-Bold
Didot-Italic
DiwanKufi
DiwanMishafi
DiwanMishafiGold
DiwanThuluth
EuphemiaUCAS
EuphemiaUCAS-Bold
EuphemiaUCAS-Italic
FZLTTHB--B51-0
FZLTTHK--GBK1-0
FZLTXHB--B51-0
FZLTXHK--GBK1-0
FZLTZHB--B51-0
FZLTZHK--GBK1-0
Farah
Farisi
Futura-Bold
Futura-CondensedExtraBold
Futura-CondensedMedium
Futura-Medium
Futura-MediumItalic
GB18030Bitmap
Galvji
Galvji-Bold
Galvji-BoldOblique
Galvji-Oblique
GeezaPro
GeezaPro-Bold
Geneva
Georgia
Georgia-Bold
Georgia-BoldItalic
Georgia-Italic
GillSans
GillSans-Bold
GillSans-BoldItalic
GillSans-Italic
GillSans-Light
GillSans-LightItalic
GillSans-SemiBold
GillSans-SemiBoldItalic
GillSans-UltraBold
GujaratiMT
GujaratiMT-Bold
GujaratiSangamMN
GujaratiSangamMN-Bold
GurmukhiMN
GurmukhiMN-Bold
GurmukhiSangamMN
GurmukhiSangamMN-Bold
Handwriting-Dakota
HannotateSC-W5
HannotateSC-W7
HannotateTC-W5
HannotateTC-W7
HanziPenSC-W3
HanziPenSC-W5
HanziPenTC-W3
HanziPenTC-W5
Helvetica
Helvetica-Bold
Helvetica-BoldOblique
Helvetica-Light
Helvetica-LightOblique
Helvetica-Oblique
HelveticaLTMM
HelveticaNeue
HelveticaNeue-Bold
HelveticaNeue-BoldItalic
HelveticaNeue-CondensedBlack
HelveticaNeue-CondensedBold
HelveticaNeue-Italic
HelveticaNeue-Light
HelveticaNeue-LightItalic
HelveticaNeue-Medium
HelveticaNeue-MediumItalic
HelveticaNeue-Thin
HelveticaNeue-ThinItalic
HelveticaNeue-UltraLight
HelveticaNeue-UltraLightItalic
Herculanum
HiraKakuPro-W3
HiraKakuPro-W6
HiraKakuProN-W3
HiraKakuProN-W6
HiraKakuStd-W8
HiraKakuStdN-W8
HiraMaruPro-W4
HiraMaruProN-W4
HiraMinPro-W3
HiraMinPro-W6
HiraMinProN-W3
HiraMinProN-W6
HiraginoSans-W0
HiraginoSans-W1
HiraginoSans-W2
HiraginoSans-W3
HiraginoSans-W4
HiraginoSans-W5
HiraginoSans-W6
HiraginoSans-W7
HiraginoSans-W8
HiraginoSans-W9
HiraginoSansCNS-W3
HiraginoSansCNS-W6
HiraginoSansGB-W3
HiraginoSansGB-W6
HoeflerText-Black
HoeflerText-BlackItalic
HoeflerText-Italic
HoeflerText-Ornaments
HoeflerText-Regular
ITFDevanagari-Bold
ITFDevanagari-Book
ITFDevanagari-Demi
ITFDevanagari-Light
ITFDevanagari-Medium
ITFDevanagariMarathi-Bold
ITFDevanagariMarathi-Book
ITFDevanagariMarathi-Demi
ITFDevanagariMarathi-Light
ITFDevanagariMarathi-Medium
Impact
InaiMathi
InaiMathi-Bold
IowanOldStyle-Black
IowanOldStyle-BlackItalic
IowanOldStyle-Bold
IowanOldStyle-BoldItalic
IowanOldStyle-Italic
IowanOldStyle-Roman
IowanOldStyle-Titling
JCHEadA
JCfg
JCkg
JCsmPC
JazzLetPlain
Kailasa
Kailasa-Bold
KannadaMN
KannadaMN-Bold
KannadaSangamMN
KannadaSangamMN-Bold
Kefa-Bold
Kefa-Regular
KhmerMN
KhmerMN-Bold
KhmerSangamMN
Klee-Demibold
Klee-Medium
KohinoorBangla-Bold
KohinoorBangla-Light
KohinoorBangla-Medium
KohinoorBangla-Regular
KohinoorBangla-Semibold
KohinoorDevanagari-Bold
KohinoorDevanagari-Light
KohinoorDevanagari-Medium
KohinoorDevanagari-Regular
KohinoorDevanagari-Semibold
KohinoorGujarati-Bold
KohinoorGujarati-Light
KohinoorGujarati-Medium
KohinoorGujarati-Regular
KohinoorGujarati-Semibold
KohinoorTelugu-Bold
KohinoorTelugu-Light
KohinoorTelugu-Medium
KohinoorTelugu-Regular
KohinoorTelugu-Semibold
Kokonor
Krungthep
KufiStandardGK
LaoMN
LaoMN-Bold
LaoSangamMN
LastResort
LiGothicMed
LiHeiPro
LiSongPro
LiSungLight
LucidaGrande
LucidaGrande-Bold
Luminari-Regular
MLingWaiMedium-SC
MLingWaiMedium-TC
MalayalamMN
MalayalamMN-Bold
MalayalamSangamMN
MalayalamSangamMN-Bold
Marion-Bold
Marion-Italic
Marion-Regular
MarkerFelt-Thin
MarkerFelt-Wide
Menlo-Bold
Menlo-BoldItalic
Menlo-Italic
Menlo-Regular
MicrosoftSansSerif
MonaLisaSolidITCTT
Monaco
MonotypeGurmukhi
Mshtakan
MshtakanBold
MshtakanBoldOblique
MshtakanOblique
MuktaMahee-Bold
MuktaMahee-ExtraBold
MuktaMahee-ExtraLight
MuktaMahee-Light
MuktaMahee-Medium
MuktaMahee-Regular
MuktaMahee-SemiBold
Muna
MunaBlack
MunaBold
MyanmarMN
MyanmarMN-Bold
MyanmarSangamMN
MyanmarSangamMN-Bold
Nadeem
NanumBrush
NanumGothic
NanumGothicBold
NanumGothicExtraBold
NanumMyeongjo
NanumMyeongjoBold
NanumMyeongjoExtraBold
NanumPen
NewPeninimMT
NewPeninimMT-Bold
NewPeninimMT-BoldInclined
NewPeninimMT-Inclined
Noteworthy-Bold
Noteworthy-Light
NotoNastaliqUrdu
NotoNastaliqUrdu-Bold
NotoSansArmenian-Black
NotoSansArmenian-Bold
NotoSansArmenian-ExtraBold
NotoSansArmenian-ExtraLight
NotoSansArmenian-Light
NotoSansArmenian-Medium
NotoSansArmenian-Regular
NotoSansArmenian-SemiBold
NotoSansArmenian-Thin
NotoSansAvestan-Regular
NotoSansBamum-Regular
NotoSansBatak-Regular
NotoSansBrahmi-Regular
NotoSansBuginese-Regular
NotoSansBuhid-Regular
NotoSansCarian-Regular
NotoSansChakma-Regular
NotoSansCham-Regular
NotoSansCoptic-Regular
NotoSansCuneiform-Regular
NotoSansCypriot-Regular
NotoSansEgyptianHieroglyphs-Regular
NotoSansGlagolitic-Regular
NotoSansGothic-Regular
NotoSansHanunoo-Regular
NotoSansImperialAramaic-Regular
NotoSansInscriptionalPahlavi-Regular
NotoSansInscriptionalParthian-Regular
NotoSansJavanese-Regular
NotoSansKaithi-Regular
NotoSansKannada-Black
NotoSansKannada-Bold
NotoSansKannada-ExtraBold
NotoSansKannada-ExtraLight
NotoSansKannada-Light
NotoSansKannada-Medium
NotoSansKannada-Regular
NotoSansKannada-SemiBold
NotoSansKannada-Thin
NotoSansKayahLi-Regular
NotoSansKharoshthi-Regular
NotoSansLepcha-Regular
NotoSansLimbu-Regular
NotoSansLinearB-Regular
NotoSansLisu-Regular
NotoSansLycian-Regular
NotoSansLydian-Regular
NotoSansMandaic-Regular
NotoSansMeeteiMayek-Regular
NotoSansMongolian
NotoSansMyanmar-Black
NotoSansMyanmar-Bold
NotoSansMyanmar-ExtraBold
NotoSansMyanmar-ExtraLight
NotoSansMyanmar-Light
NotoSansMyanmar-Medium
NotoSansMyanmar-Regular
NotoSansMyanmar-SemiBold
NotoSansMyanmar-Thin
NotoSansNKo-Regular
NotoSansNewTaiLue-Regular
NotoSansOgham-Regular
NotoSansOlChiki-Regular
NotoSansOldItalic-Regular
NotoSansOldPersian-Regular
NotoSansOldSouthArabian-Regular
NotoSansOldTurkic-Regular
NotoSansOriya
NotoSansOriya-Bold
NotoSansOsmanya-Regular
NotoSansPhagsPa-Regular
NotoSansPhoenician-Regular
NotoSansRejang-Regular
NotoSansRunic-Regular
NotoSansSamaritan-Regular
NotoSansSaurashtra-Regular
NotoSansShavian-Regular
NotoSansSundanese-Regular
NotoSansSylotiNagri-Regular
NotoSansSyriac-Regular
NotoSansTagalog-Regular
NotoSansTagbanwa-Regular
NotoSansTaiLe-Regular
NotoSansTaiTham
NotoSansTaiViet-Regular
NotoSansThaana-Regular
NotoSansTifinagh-Regular
NotoSansUgaritic-Regular
NotoSansVai-Regular
NotoSansYi-Regular
NotoSansZawgyi-Black
NotoSansZawgyi-Bold
NotoSansZawgyi-ExtraBold
NotoSansZawgyi-ExtraLight
NotoSansZawgyi-Light
NotoSansZawgyi-Medium
NotoSansZawgyi-Regular
NotoSansZawgyi-SemiBold
NotoSansZawgyi-Thin
NotoSerifBalinese-Regular
NotoSerifMyanmar-Black
NotoSerifMyanmar-Bold
NotoSerifMyanmar-ExtraBold
NotoSerifMyanmar-ExtraLight
NotoSerifMyanmar-Light
NotoSerifMyanmar-Medium
NotoSerifMyanmar-Regular
NotoSerifMyanmar-SemiBold
NotoSerifMyanmar-Thin
Optima-Bold
Optima-BoldItalic
Optima-ExtraBlack
Optima-Italic
Optima-Regular
OriyaMN
OriyaMN-Bold
OriyaSangamMN
OriyaSangamMN-Bold
Osaka
Osaka-Mono
PSLOrnanongPro-Bold
PSLOrnanongPro-BoldItalic
PSLOrnanongPro-Demibold
PSLOrnanongPro-DemiboldItalic
PSLOrnanongPro-Italic
PSLOrnanongPro-Light
PSLOrnanongPro-LightItalic
PSLOrnanongPro-Regular
PTMono-Bold
PTMono-Regular
PTSans-Bold
PTSans-BoldItalic
PTSans-Caption
PTSans-CaptionBold
PTSans-Italic
PTSans-Narrow
PTSans-NarrowBold
PTSans-Regular
PTSerif-Bold
PTSerif-BoldItalic
PTSerif-Caption
PTSerif-CaptionItalic
PTSerif-Italic
PTSerif-Regular
Palatino-Bold
Palatino-BoldItalic
Palatino-Italic
Palatino-Roman
Papyrus
Papyrus-Condensed
PartyLetPlain
Phosphate-Inline
Phosphate-Solid
PingFangHK-Light
PingFangHK-Medium
PingFangHK-Regular
PingFangHK-Semibold
PingFangHK-Thin
PingFangHK-Ultralight
PingFangSC-Light
PingFangSC-Medium
PingFangSC-Regular
PingFangSC-Semibold
PingFangSC-Thin
PingFangSC-Ultralight
PingFangTC-Light
PingFangTC-Medium
PingFangTC-Regular
PingFangTC-Semibold
PingFangTC-Thin
PingFangTC-Ultralight
PlantagenetCherokee
PortagoITCTT
PrincetownLET
Raanana
RaananaBold
Rockwell-Bold
Rockwell-BoldItalic
Rockwell-Italic
Rockwell-Regular
SIL-Hei-Med-Jian
SIL-Kai-Reg-Jian
STBaoliSC-Regular
STBaoliTC-Regular
STFangsong
STHeiti
STHeitiSC-Light
STHeitiSC-Medium
STHeitiTC-Light
STHeitiTC-Medium
STIXGeneral-Bold
STIXGeneral-BoldItalic
STIXGeneral-Italic
STIXGeneral-Regular
STIXIntegralsD-Bold
STIXIntegralsD-Regular
STIXIntegralsSm-Bold
STIXIntegralsSm-Regular
STIXIntegralsUp-Bold
STIXIntegralsUp-Regular
STIXIntegralsUpD-Bold
STIXIntegralsUpD-Regular
STIXIntegralsUpSm-Bold
STIXIntegralsUpSm-Regular
STIXNonUnicode-Bold
STIXNonUnicode-BoldItalic
STIXNonUnicode-Italic
STIXNonUnicode-Regular
STIXSizeFiveSym-Regular
STIXSizeFourSym-Bold
STIXSizeFourSym-Regular
STIXSizeOneSym-Bold
STIXSizeOneSym-Regular
STIXSizeThreeSym-Bold
STIXSizeThreeSym-Regular
STIXSizeTwoSym-Bold
STIXSizeTwoSym-Regular
STIXVariants-Bold
STIXVariants-Regular
STKaiti
STKaitiSC-Black
STKaitiSC-Bold
STKaitiSC-Regular
STKaitiTC-Black
STKaitiTC-Bold
STKaitiTC-Regular
STLibianSC-Regular
STLibianTC-Regular
STSong
STSongti-SC-Black
STSongti-SC-Bold
STSongti-SC-Light
STSongti-SC-Regular
STSongti-TC-Bold
STSongti-TC-Light
STSongti-TC-Regular
STXihei
STXingkaiSC-Bold
STXingkaiSC-Light
STXingkaiTC-Bold
STXingkaiTC-Light
STYuanti-SC-Bold
STYuanti-SC-Light
STYuanti-SC-Regular
STYuanti-TC-Bold
STYuanti-TC-Light
STYuanti-TC-Regular
Sana
SantaFeLetPlain
Sathu
SavoyeLetPlain
SchoolHouseCursiveB
SchoolHousePrintedA
Seravek
Seravek-Bold
Seravek-BoldItalic
Seravek-ExtraLight
Seravek-ExtraLightItalic
Seravek-Italic
Seravek-Light
Seravek-LightItalic
Seravek-Medium
Seravek-MediumItalic
ShreeDev0714
ShreeDev0714-Bold
ShreeDev0714-BoldItalic
ShreeDev0714-Italic
SignPainter-HouseScript
SignPainter-HouseScriptSemibold
Silom
SinhalaMN
SinhalaMN-Bold
SinhalaSangamMN
SinhalaSangamMN-Bold
Skia-Regular
Skia-Regular_Black
Skia-Regular_Black-Condensed
Skia-Regular_Black-Extended
Skia-Regular_Bold
Skia-Regular_Condensed
Skia-Regular_Extended
Skia-Regular_Light
Skia-Regular_Light-Condensed
Skia-Regular_Light-Extended
SnellRoundhand
SnellRoundhand-Black
SnellRoundhand-Bold
StoneSansITCTT-Bold
StoneSansITCTT-Semi
StoneSansITCTT-SemiIta
SukhumvitSet-Bold
SukhumvitSet-Light
SukhumvitSet-Medium
SukhumvitSet-SemiBold
SukhumvitSet-Text
SukhumvitSet-Thin
Superclarendon-Black
Superclarendon-BlackItalic
Superclarendon-Bold
Superclarendon-BoldItalic
Superclarendon-Italic
Superclarendon-Light
Superclarendon-LightItalic
Superclarendon-Regular
Symbol
SynchroLET
Tahoma
Tahoma-Bold
TamilMN
TamilMN-Bold
TamilSangamMN
TamilSangamMN-Bold
TeluguMN
TeluguMN-Bold
TeluguSangamMN
TeluguSangamMN-Bold
Thonburi
Thonburi-Bold
Thonburi-Light
Times-Bold
Times-BoldItalic
Times-Italic
Times-Roman
TimesLTMM
TimesNewRomanPS-BoldItalicMT
TimesNewRomanPS-BoldMT
TimesNewRomanPS-ItalicMT
TimesNewRomanPSMT
ToppanBunkyuGothicPr6N-DB
ToppanBunkyuGothicPr6N-Regular
ToppanBunkyuMidashiGothicStdN-ExtraBold
ToppanBunkyuMidashiMinchoStdN-ExtraBold
ToppanBunkyuMinchoPr6N-Regular
Trattatello
Trebuchet-BoldItalic
TrebuchetMS
TrebuchetMS-Bold
TrebuchetMS-Italic
TsukuARdGothic-Bold
TsukuARdGothic-Regular
TsukuBRdGothic-Bold
TsukuBRdGothic-Regular
TypeEmbellishmentsOneLetPlain
Verdana
Verdana-Bold
Verdana-BoldItalic
Verdana-Italic
Waseem
WaseemLight
Webdings
WeibeiSC-Bold
WeibeiTC-Bold
Wingdings-Regular
Wingdings2
Wingdings3
YuGo-Bold
YuGo-Medium
YuKyo-Bold
YuKyo-Medium
YuKyo_Yoko-Bold
YuKyo_Yoko-Medium
YuMin-Demibold
YuMin-Extrabold
YuMin-Medium
YuMin_36pKn-Demibold
YuMin_36pKn-Extrabold
YuMin_36pKn-Medium
YuppySC-Regular
YuppyTC-Regular
ZapfDingbatsITC
Zapfino
/* Unit test for ScriptManager */
ScriptManager
 - script: unit-test-0
 - script: unit-test-1
/* Unit test for environmrnt */
Environment("MSG") = hello
current_directory => true
temporary_directory => true
Summary: OK
