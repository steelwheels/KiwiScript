'use strict' ;
/* Define Enum: Alignment */
let Alignment = {
	leading : 0,
	trailing : 1,
	fill : 2,
	center : 3
};
/* Define Enum: ApplicationKind */
let ApplicationKind = {
	terminal : 0,
	window : 1,
	operation : 2
};
/* Define Enum: Authorize */
let Authorize = {
	undetermined : 0,
	denied : 2,
	authorized : 3
};
/* Define Enum: Axis */
let Axis = {
	horizontal : 0,
	vertical : 1
};
/* Define Enum: Color */
let Color = {
	black : 0,
	red : 1,
	green : 2,
	yellow : 3,
	blue : 4,
	magenta : 5,
	cyan : 6,
	white : 7,
	min : 0,
	max : 7
};
/* Define Enum: Distribution */
let Distribution = {
	fill : 0,
	fillEqually : 1,
	equalSpacing : 2
};
/* Define Enum: ExitCode */
let ExitCode = {
	noError : 0,
	internalError : 1,
	commaneLineError : 2,
	syntaxError : 3,
	exception : 4
};
/* Define Enum: TextAlign */
let TextAlign = {
	left : 0,
	center : 2,
	right : 1,
	justfied : 3,
	normal : 4
};
/* Math.js */

/* randomInt: Get random integer value between min and max */
Math.randomInt = function(min, max) {
  const range = max - min + 1 ;
  const rval  = Math.floor(Math.random() * range) ;
  return rval + min ;
}
  -> Compiler: OK
/* Unit test for Database */
read(d0) -> 1234
write(d2, -5) -> true
read(d2) -> -5
/* Unit test for Operation */
// Allocate operation
'use strict' ;
/* Define Enum: Alignment */
let Alignment = {
	leading : 0,
	trailing : 1,
	fill : 2,
	center : 3
};
/* Define Enum: ApplicationKind */
let ApplicationKind = {
	terminal : 0,
	window : 1,
	operation : 2
};
/* Define Enum: Authorize */
let Authorize = {
	undetermined : 0,
	denied : 2,
	authorized : 3
};
/* Define Enum: Axis */
let Axis = {
	horizontal : 0,
	vertical : 1
};
/* Define Enum: Color */
let Color = {
	black : 0,
	red : 1,
	green : 2,
	yellow : 3,
	blue : 4,
	magenta : 5,
	cyan : 6,
	white : 7,
	min : 0,
	max : 7
};
/* Define Enum: Distribution */
let Distribution = {
	fill : 0,
	fillEqually : 1,
	equalSpacing : 2
};
/* Define Enum: ExitCode */
let ExitCode = {
	noError : 0,
	internalError : 1,
	commaneLineError : 2,
	syntaxError : 3,
	exception : 4
};
/* Define Enum: TextAlign */
let TextAlign = {
	left : 0,
	center : 2,
	right : 1,
	justfied : 3,
	normal : 4
};
/* Math.js */

/* randomInt: Get random integer value between min and max */
Math.randomInt = function(min, max) {
  const range = max - min + 1 ;
  const rval  = Math.floor(Math.random() * range) ;
  return rval + min ;
}
/*
 * Operation.js : Define Operation class
 */

 class CancelException extends Error
 {
 	constructor (code){
 		super("CancelException") ;
 		this.code = code ;
 	}
 }

 function _cancel()
 {
 	throw new CancelException(ExitCode.exception) ;
 }

 function _exec_cancelable(fn, ...args)
 {
 	try {
 		return fn(...args) ;
 	} catch(err) {
 		return err.code ;
 	}
 }
 
Operation.__defineGetter__("output", function(   ){ return this.get("output"     ); }) ;
Operation.__defineSetter__("output", function(val){ return this.set("output", val); }) ;
Operation.__defineGetter__("input", function(   ){ return this.get("input"     ); }) ;
Operation.__defineSetter__("input", function(val){ return this.set("input", val); }) ;
Operation.__defineGetter__("parameter", function(   ){ return this.get("parameter"     ); }) ;
Operation.__defineSetter__("parameter", function(val){ return this.set("parameter", val); }) ;
Operation.__defineGetter__("isExecuting", function(   ){ return this.get("isExecuting"     ); }) ;
Operation.__defineSetter__("isExecuting", function(val){ return this.set("isExecuting", val); }) ;
Operation.__defineGetter__("isFinished", function(   ){ return this.get("isFinished"     ); }) ;
Operation.__defineSetter__("isFinished", function(val){ return this.set("isFinished", val); }) ;
Operation.__defineGetter__("isCanceled", function(   ){ return this.get("isCanceled"     ); }) ;
Operation.__defineSetter__("isCanceled", function(val){ return this.set("isCanceled", val); }) ;
Operation.__defineGetter__("addListener", function(   ){ return this.get("addListener"     ); }) ;
Operation.__defineSetter__("addListener", function(val){ return this.set("addListener", val); }) ;
Operation.addListener("isCanceled", function(newval){ if(newval){ _cancel() ; }}) ;
[Flow   ] Operaion: Compile library scripts at /Users/tomoo/Project/KiwiScript/KiwiLibrary/Source/Process/KLOperation.swift/222/compileSource(operation:program:mainFunction:)
[Flow   ] Operaion: Compile program at /Users/tomoo/Project/KiwiScript/KiwiLibrary/Source/Process/KLOperation.swift/228/compileSource(operation:program:mainFunction:)
console.log("***** Program *****\n");
***** Program *****
[Flow   ] Operaion: Compile main function at /Users/tomoo/Project/KiwiScript/KiwiLibrary/Source/Process/KLOperation.swift/234/compileSource(operation:program:mainFunction:)
_main = function(){
  Operation.output = 5678 ; 
  console.log("[MainFunc] " + Operation.input + ", " + Operation.output + "\n") ;
} ;
[Flow   ] Success to compile operation at /Users/tomoo/Project/KiwiScript/KiwiLibrary/Source/Process/KLOperation.swift/164/compile
// Execute the operation
// Wait operations are finished
[MainFunc] 1234, 5678
// Check output parameter
Result = 5678
Summary: OK
[UnitTest]

