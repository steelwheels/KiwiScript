*** Script1
SyntaxError: Unexpected end of script
*** Script2
SyntaxError: Unexpected identifier 'hoge'. Expected a ';' following a return statement.
testError : OK
* Setup compiler
* compile
'use strict' ;
/* Define Enum: Alignment */
let Alignment = {
	left : 0,
	center : 1,
	right : 2,
	top : 3,
	middle : 4,
	bottom : 5
};
/* Define Enum: ApplicationKind */
let ApplicationKind = {
	terminal : 0,
	window : 1,
	operation : 2
};
/* Define Enum: Authorize */
let Authorize = {
	undetermined : 0,
	denied : 2,
	authorized : 3
};
/* Define Enum: Color */
let Color = {
	black : 0,
	red : 1,
	green : 2,
	yellow : 3,
	blue : 4,
	magenta : 5,
	cyan : 6,
	white : 7,
	min : 0,
	max : 7
};
/* Define Enum: ExitCode */
let ExitCode = {
	noError : 0,
	internalError : 1,
	commaneLineError : 2,
	syntaxError : 3,
	exception : 4
};
/* Define Enum: TextAlign */
let TextAlign = {
	left : 0,
	center : 2,
	right : 1,
	justfied : 3,
	normal : 4
};
/* boot.js */

class CancelException extends Error
{
	constructor (code){
		super("CancelException") ;
		this.code = code ;
	}
}

function _cancel()
{
	throw new CancelException(ExitCode.exception) ;
}

function _exec_cancelable(fn, ...args)
{
	try {
		return fn(...args) ;
	} catch(err) {
		return err.code ;
	}
}


Process.__defineGetter__("isExecuting", function(   ){ return this.get("isExecuting"     ); }) ;
Process.__defineSetter__("isExecuting", function(val){ return this.set("isExecuting", val); }) ;
Process.__defineGetter__("isFinished", function(   ){ return this.get("isFinished"     ); }) ;
Process.__defineSetter__("isFinished", function(val){ return this.set("isFinished", val); }) ;
Process.__defineGetter__("kind", function(   ){ return this.get("kind"     ); }) ;
Process.__defineSetter__("kind", function(val){ return this.set("kind", val); }) ;
Process.__defineGetter__("isCanceled", function(   ){ return this.get("isCanceled"     ); }) ;
Process.__defineSetter__("isCanceled", function(val){ return this.set("isCanceled", val); }) ;
Process.__defineGetter__("addListener", function(   ){ return this.get("addListener"     ); }) ;
Process.__defineSetter__("addListener", function(val){ return this.set("addListener", val); }) ;
Compile ... OK
testCompiler : OK
* Setup compiler
'use strict' ;
/* Define Enum: Alignment */
let Alignment = {
	left : 0,
	center : 1,
	right : 2,
	top : 3,
	middle : 4,
	bottom : 5
};
/* Define Enum: ApplicationKind */
let ApplicationKind = {
	terminal : 0,
	window : 1,
	operation : 2
};
/* Define Enum: Authorize */
let Authorize = {
	undetermined : 0,
	denied : 2,
	authorized : 3
};
/* Define Enum: Color */
let Color = {
	black : 0,
	red : 1,
	green : 2,
	yellow : 3,
	blue : 4,
	magenta : 5,
	cyan : 6,
	white : 7,
	min : 0,
	max : 7
};
/* Define Enum: ExitCode */
let ExitCode = {
	noError : 0,
	internalError : 1,
	commaneLineError : 2,
	syntaxError : 3,
	exception : 4
};
/* Define Enum: TextAlign */
let TextAlign = {
	left : 0,
	center : 2,
	right : 1,
	justfied : 3,
	normal : 4
};
/* boot.js */

class CancelException extends Error
{
	constructor (code){
		super("CancelException") ;
		this.code = code ;
	}
}

function _cancel()
{
	throw new CancelException(ExitCode.exception) ;
}

function _exec_cancelable(fn, ...args)
{
	try {
		return fn(...args) ;
	} catch(err) {
		return err.code ;
	}
}


Process.__defineGetter__("isExecuting", function(   ){ return this.get("isExecuting"     ); }) ;
Process.__defineSetter__("isExecuting", function(val){ return this.set("isExecuting", val); }) ;
Process.__defineGetter__("isFinished", function(   ){ return this.get("isFinished"     ); }) ;
Process.__defineSetter__("isFinished", function(val){ return this.set("isFinished", val); }) ;
Process.__defineGetter__("kind", function(   ){ return this.get("kind"     ); }) ;
Process.__defineSetter__("kind", function(val){ return this.set("kind", val); }) ;
Process.__defineGetter__("isCanceled", function(   ){ return this.get("isCanceled"     ); }) ;
Process.__defineSetter__("isCanceled", function(val){ return this.set("isCanceled", val); }) ;
Process.__defineGetter__("addListener", function(   ){ return this.get("addListener"     ); }) ;
Process.__defineSetter__("addListener", function(val){ return this.set("addListener", val); }) ;
Compile: OK
isexec = Process.isExecuting ;
// Process.isExecuting == true
_exec_cancelable(function(){ return 0 ; }) ;
* retval0 = 0
_exec_cancelable(function(){ _cancel() ; return 0 ;}) ;
* retval1 = 4
testExec : OK
/*** Enqueue Operation ***/
/*** Compile Operation ***/
'use strict' ;
/* Define Enum: Alignment */
let Alignment = {
	left : 0,
	center : 1,
	right : 2,
	top : 3,
	middle : 4,
	bottom : 5
};
/* Define Enum: ApplicationKind */
let ApplicationKind = {
	terminal : 0,
	window : 1,
	operation : 2
};
/* Define Enum: Authorize */
let Authorize = {
	undetermined : 0,
	denied : 2,
	authorized : 3
};
/* Define Enum: Color */
let Color = {
	black : 0,
	red : 1,
	green : 2,
	yellow : 3,
	blue : 4,
	magenta : 5,
	cyan : 6,
	white : 7,
	min : 0,
	max : 7
};
/* Define Enum: ExitCode */
let ExitCode = {
	noError : 0,
	internalError : 1,
	commaneLineError : 2,
	syntaxError : 3,
	exception : 4
};
/* Define Enum: TextAlign */
let TextAlign = {
	left : 0,
	center : 2,
	right : 1,
	justfied : 3,
	normal : 4
};
/* boot.js */

class CancelException extends Error
{
	constructor (code){
		super("CancelException") ;
		this.code = code ;
	}
}

function _cancel()
{
	throw new CancelException(ExitCode.exception) ;
}

function _exec_cancelable(fn, ...args)
{
	try {
		return fn(...args) ;
	} catch(err) {
		return err.code ;
	}
}


Process.__defineGetter__("isExecuting", function(   ){ return this.get("isExecuting"     ); }) ;
Process.__defineSetter__("isExecuting", function(val){ return this.set("isExecuting", val); }) ;
Process.__defineGetter__("isFinished", function(   ){ return this.get("isFinished"     ); }) ;
Process.__defineSetter__("isFinished", function(val){ return this.set("isFinished", val); }) ;
Process.__defineGetter__("kind", function(   ){ return this.get("kind"     ); }) ;
Process.__defineSetter__("kind", function(val){ return this.set("kind", val); }) ;
Process.__defineGetter__("isCanceled", function(   ){ return this.get("isCanceled"     ); }) ;
Process.__defineSetter__("isCanceled", function(val){ return this.set("isCanceled", val); }) ;
Process.__defineGetter__("addListener", function(   ){ return this.get("addListener"     ); }) ;
Process.__defineSetter__("addListener", function(val){ return this.set("addListener", val); }) ;
/* UTOperation.js */

var counter = 0 ;

function main() {
	counter += 1 ;
	return ExitCode.noError ;
}
1st operation ... OK
2nd operation ... OK
testOperation : OK
testOperationQueues(console:) ... OK
testOperationQueues : OK
/* Bool: true */
b0 = true ;
* JSType = bool
* NativeValue = 1
* JSValue = 1
/* Number: 123 */
i0 = 123 ;
* JSType = number
* NativeValue = 123
* JSValue = 123
/* Number: 123.4 */
f0 = 123.4 ;
* JSType = number
* NativeValue = 123.4
* JSValue = 123.4
/* String: "hello" */
s0 = "hello" ;
* JSType = string
* NativeValue = "hello"
* JSValue = hello
/* Array: [0, 1, 2, 3, 3.1] */
a0 = [0, 1, 2, 3, 3.1] ;
* JSType = array
* NativeValue = [
  0
  1
  2
  3
  3.1
]
* JSValue = [
  0
  1
  2
  3
  3.1
]
/* Dictionary: {a:0, b:1, c:2, d:3, e:3.1} */
d0 = {a:0, b:1, c:2, d:3, e:3.1} ;
* JSType = dictionary
* NativeValue = {
  a: 0
  b: 1
  c: 2
  d: 3
  e: 3.1
}
* JSValue = {
  a: 0
  b: 1
  c: 2
  d: 3
  e: 3.1
}
/* Dictionary: {origin: {x:10.0, y:11.0}, size: {width:20.0, height: 21.0}} */
d1 = {origin: {x:10.0, y:11.0}, size: {width:20.0, height: 21.0}};
* JSType = dictionary
* NativeValue = {
  origin: 
  {
    x: 10
    y: 11
  }
  size: 
  {
    height: 21
    width: 20
  }
}
* JSValue = {
  origin: 
  {
    x: 10
    y: 11
  }
  size: 
  {
    height: 21
    width: 20
  }
}
/* Dictionary: d2 = {
  imageFile:      "Images/blue-symbol.png",
  scale:          0.5,
  alpha:          1.0,
  position:       {x:10.0, y:10.0},
  rotation:       0.5,
  duration:       1.0
} */
d2 = {
  imageFile:      "Images/blue-symbol.png",
  scale:          0.5,
  alpha:          1.0,
  position:       {x:10.0, y:10.0},
  rotation:       0.5,
  duration:       1.0
}* JSType = dictionary
* NativeValue = {
  alpha: 1
  duration: 1
  imageFile: "Images/blue-symbol.png"
  position: 
  {
    x: 10
    y: 10
  }
  rotation: 0.5
  scale: 0.5
}
* JSValue = {
  alpha: 1
  duration: 1
  imageFile: "Images/blue-symbol.png"
  position: 
  {
    x: 10
    y: 10
  }
  rotation: 0.5
  scale: 0.5
}
testValue : OK
SUMMARY: OK
