*** Script1
SyntaxError: Unexpected end of script
*** Script2
SyntaxError: Unexpected identifier 'hoge'. Expected a ';' following a return statement.
testError : OK
* Setup compiler
* compile
'use strict' ;
/* Define Enum: Alignment */
let Alignment = {
	left : 0,
	center : 1,
	right : 2,
	top : 3,
	middle : 4,
	bottom : 5
};
/* Define Enum: Authorize */
let Authorize = {
	undetermined : 0,
	denied : 2,
	authorized : 3
};
/* Define Enum: Color */
let Color = {
	black : 0,
	red : 1,
	green : 2,
	yellow : 3,
	blue : 4,
	magenta : 5,
	cyan : 6,
	white : 7,
	min : 0,
	max : 7
};
/* Define Enum: ExitCode */
let ExitCode = {
	noError : 0,
	internalError : 1,
	commaneLineError : 2,
	syntaxError : 3,
	execError : 4,
	exception : 5
};
/* Define Enum: TextAlign */
let TextAlign = {
	left : 0,
	center : 2,
	right : 1,
	justfied : 3,
	normal : 4
};
/* boot.js */

class CancelException extends Error
{
	constructor (code){
		super("CancelException") ;
		this.code = code ;
	}
}

function _cancel(code)
{
	throw new CancelException(code) ;
}

function _exec_cancelable(fn, ...args)
{
	try {
		return fn(...args) ;
	} catch(err) {
		return err.code ;
	}
}


Compile ... OK
testCompiler : OK
* Setup compiler
'use strict' ;
/* Define Enum: Alignment */
let Alignment = {
	left : 0,
	center : 1,
	right : 2,
	top : 3,
	middle : 4,
	bottom : 5
};
/* Define Enum: Authorize */
let Authorize = {
	undetermined : 0,
	denied : 2,
	authorized : 3
};
/* Define Enum: Color */
let Color = {
	black : 0,
	red : 1,
	green : 2,
	yellow : 3,
	blue : 4,
	magenta : 5,
	cyan : 6,
	white : 7,
	min : 0,
	max : 7
};
/* Define Enum: ExitCode */
let ExitCode = {
	noError : 0,
	internalError : 1,
	commaneLineError : 2,
	syntaxError : 3,
	execError : 4,
	exception : 5
};
/* Define Enum: TextAlign */
let TextAlign = {
	left : 0,
	center : 2,
	right : 1,
	justfied : 3,
	normal : 4
};
/* boot.js */

class CancelException extends Error
{
	constructor (code){
		super("CancelException") ;
		this.code = code ;
	}
}

function _cancel(code)
{
	throw new CancelException(code) ;
}

function _exec_cancelable(fn, ...args)
{
	try {
		return fn(...args) ;
	} catch(err) {
		return err.code ;
	}
}


Compile: OK
_exec_cancelable(function(){ return 0 ; }) ;
* result0 = 0
_exec_cancelable(function(){ _cancel(1) ; return 0 ;}) ;
* result1 = 1
testExec : OK
/*** Compile Operation ***/
'use strict' ;
/* Define Enum: Alignment */
let Alignment = {
	left : 0,
	center : 1,
	right : 2,
	top : 3,
	middle : 4,
	bottom : 5
};
/* Define Enum: Authorize */
let Authorize = {
	undetermined : 0,
	denied : 2,
	authorized : 3
};
/* Define Enum: Color */
let Color = {
	black : 0,
	red : 1,
	green : 2,
	yellow : 3,
	blue : 4,
	magenta : 5,
	cyan : 6,
	white : 7,
	min : 0,
	max : 7
};
/* Define Enum: ExitCode */
let ExitCode = {
	noError : 0,
	internalError : 1,
	commaneLineError : 2,
	syntaxError : 3,
	execError : 4,
	exception : 5
};
/* Define Enum: TextAlign */
let TextAlign = {
	left : 0,
	center : 2,
	right : 1,
	justfied : 3,
	normal : 4
};
/* boot.js */

class CancelException extends Error
{
	constructor (code){
		super("CancelException") ;
		this.code = code ;
	}
}

function _cancel(code)
{
	throw new CancelException(code) ;
}

function _exec_cancelable(fn, ...args)
{
	try {
		return fn(...args) ;
	} catch(err) {
		return err.code ;
	}
}


Process.__defineGetter__("isExecuting", function(   ){ return this.get("isExecuting"     ); }) ;
Process.__defineSetter__("isExecuting", function(val){ return this.set("isExecuting", val); }) ;
Process.__defineGetter__("isFinished", function(   ){ return this.get("isFinished"     ); }) ;
Process.__defineSetter__("isFinished", function(val){ return this.set("isFinished", val); }) ;
Process.__defineGetter__("isCanceled", function(   ){ return this.get("isCanceled"     ); }) ;
Process.__defineSetter__("isCanceled", function(val){ return this.set("isCanceled", val); }) ;
Process.__defineGetter__("addListener", function(   ){ return this.get("addListener"     ); }) ;
Process.__defineSetter__("addListener", function(val){ return this.set("addListener", val); }) ;
Process.addListener("isCanceled", function(newval){ if(newval){ _cancel(1) ; }}) ;
/* UTOperation.js */

var counter = 0 ;

function main() {
	counter += 1 ;
	return counter ;
}
/*** Enqueue Operation ***/
counter = 1
testOperation: OK
testOperation : OK
SUMMARY: OK
