*** Script1
SyntaxError: Unexpected end of script
*** Script2
SyntaxError: Unexpected identifier 'hoge'. Expected a ';' following a return statement.
testError : OK
* Setup compiler
* compile
'use strict' ;/* boot.js */

class ExitError extends Error
{
	constructor(code, message){
		super(message) ;
		this.code = code ;
	}
}

function _exit(code)
{
	throw new ExitError(code, "exit") ;
}

function _exec(fn, ...args)
{
	try {
		return fn(...args) ;
	} catch(err) {
		console.log(err.message + "\n") ;
		return err.code ;
	}
}
/* Define Enum: Alignment */
let Alignment = {
	left : 0,
	center : 1,
	right : 2,
	top : 3,
	middle : 4,
	bottom : 5
};
/* Define Enum: Authorize */
let Authorize = {
	undetermined : 0,
	denied : 2,
	authorized : 3
};
/* Define Enum: Color */
let Color = {
	black : 0,
	red : 1,
	green : 2,
	yellow : 3,
	blue : 4,
	magenta : 5,
	cyan : 6,
	white : 7,
	min : 0,
	max : 7
};
/* Define Enum: ExitCode */
let ExitCode = {
	noError : 0,
	internalError : 1,
	commaneLineError : 2,
	syntaxError : 3,
	execError : 4,
	exception : 5
};
/* Define Enum: TextAlign */
let TextAlign = {
	left : 0,
	center : 2,
	right : 1,
	justfied : 3,
	normal : 4
};
Compile ... OK
testCompiler : OK
* Setup compiler
'use strict' ;/* boot.js */

class ExitError extends Error
{
	constructor(code, message){
		super(message) ;
		this.code = code ;
	}
}

function _exit(code)
{
	throw new ExitError(code, "exit") ;
}

function _exec(fn, ...args)
{
	try {
		return fn(...args) ;
	} catch(err) {
		console.log(err.message + "\n") ;
		return err.code ;
	}
}
/* Define Enum: Alignment */
let Alignment = {
	left : 0,
	center : 1,
	right : 2,
	top : 3,
	middle : 4,
	bottom : 5
};
/* Define Enum: Authorize */
let Authorize = {
	undetermined : 0,
	denied : 2,
	authorized : 3
};
/* Define Enum: Color */
let Color = {
	black : 0,
	red : 1,
	green : 2,
	yellow : 3,
	blue : 4,
	magenta : 5,
	cyan : 6,
	white : 7,
	min : 0,
	max : 7
};
/* Define Enum: ExitCode */
let ExitCode = {
	noError : 0,
	internalError : 1,
	commaneLineError : 2,
	syntaxError : 3,
	execError : 4,
	exception : 5
};
/* Define Enum: TextAlign */
let TextAlign = {
	left : 0,
	center : 2,
	right : 1,
	justfied : 3,
	normal : 4
};
Compile: OK
_exec(function(){ return 0 ; }) ;
* result0 = 0
_exec(function(){ _exit(1) ; }) ;
* result1 = 1
testExec : OK
1: isExecuting=false, isFinished=true
2: isExecuting=false, isFinished=true
testOperation : OK
SUMMARY: OK
